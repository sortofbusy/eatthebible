"use strict";var ApplicationConfiguration=function(){var applicationModuleName="lettheword",applicationModuleVendorDependencies=["ngResource","ngCookies","ngTouch","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("chapters",["cgBusy"]),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("plans"),ApplicationConfiguration.registerModule("users"),angular.module("chapters").config(["$stateProvider",function($stateProvider){$stateProvider.state("listChapters",{url:"/chapters",templateUrl:"modules/chapters/views/list-chapters.client.view.html"}).state("createChapter",{url:"/chapters/create",templateUrl:"modules/chapters/views/create-chapter.client.view.html"}).state("viewChapter",{url:"/chapters/:chapterId",templateUrl:"modules/chapters/views/view-chapter.client.view.html"}).state("editChapter",{url:"/chapters/:chapterId/edit",templateUrl:"modules/chapters/views/edit-chapter.client.view.html"})}]),angular.module("chapters").controller("ChaptersController",["$scope","$modal","$http","$stateParams","$location","Authentication","Chapters","Users","$q","Plans","BibleText",function($scope,$modal,$http,$stateParams,$location,Authentication,Chapters,Users,$q,Plans,BibleText){$scope.authentication=Authentication,$http.get("/users/me").then(function(response){$scope.user=new Users(response.data)}),$scope.planSegment=0,$scope.chaptersToday=[],$scope.plansTabs=[],$scope.readingMode=!1,$scope.init=function(){var userId=$scope.authentication.user._id;$scope.chapters=Chapters.query({user:userId}),Plans.query({user:userId},function(plans){$scope.plans=plans,plans.length&&$scope.beginPlanPortion()})},$scope.beginPlanPortion=function(){$scope.readingPace=0;var chaptersInPortion=[],i=$scope.planSegment,planChaptersReadToday=$scope.plans[i].chapters?$scope.plans[i].chapters.length:0;if(planChaptersReadToday<$scope.plans[i].pace){$scope.readingPace+=$scope.plans[i].pace;for(var p=0;p<$scope.plans[i].pace-planChaptersReadToday;p++)p+$scope.plans[i].cursor<$scope.plans[i].endChapter&&chaptersInPortion.push(p+$scope.plans[i].cursor);$scope.chaptersInPortion=chaptersInPortion}else{for(var k=$scope.plans[i].cursor;k<=$scope.plans[i].endChapter;k++)chaptersInPortion.push(k);$scope.chaptersInPortion=chaptersInPortion}$http.get("/reference",{params:{chapterNumber:chaptersInPortion[0]}}).then(function(response){$scope.currentChapter=response.data,$scope.moveChapter(0)}),$scope.find()},$scope.incrementPlan=function(){var plan=$scope.plans[$scope.planSegment];$scope.chaptersInPortion.shift(),0===$scope.chaptersInPortion.length?($scope.planSegment+=1,$scope.plansTabs[$scope.planSegment]=!0,console.log("done reading "+plan.name+" today"),$scope.planSegment===$scope.plans.length?(console.log("all reading plans finished for today!"),$scope.planSegment=0):$scope.beginPlanPortion()):$http.get("/reference",{params:{chapterNumber:$scope.chaptersInPortion[0]}}).then(function(response){$scope.currentChapter=response.data,$scope.getChapterText($scope.currentChapter,0)})},$scope.changePlan=function(index){$scope.planSegment=index,$scope.plansTabs[$scope.planSegment]=!0,$scope.beginPlanPortion()},$scope.create=function(params){return $scope.textPromise=$q(function(resolve){var chapter=new Chapters(params);$scope.plans&&(chapter.plan=$scope.plans[$scope.planSegment]._id),$scope.alerts=[],chapter.$save(function(response){if($scope.plans){var plan=$scope.plans[$scope.planSegment];plan.cursor+=1,plan.chapters.push(response._id),plan.$update()}$scope.user.lastChapter=response.name,$scope.user.$update(function(response){$scope.currentChapter=response.name},function(errorResponse){$scope.alerts.push({type:"danger",msg:"Chapter entry failed"+errorResponse,icon:"times"})}),$scope.alerts.push({type:"success",msg:"Chapter entered",icon:"check-square-o"}),$scope.chapters.unshift(response),$scope.name="",$scope.chapterTextArray=null,resolve()},function(errorResponse){$scope.alerts.push({type:"danger",msg:"Chapter entry failed",icon:"times"}),resolve()})}),$scope.textPromise},$scope.submitChapterRange=function(name){if($scope.range){var range=$scope.range.split("-"),rangeStart=range[0].trim(),rangeEnd=range[1];$scope.alerts=[],rangeEnd?(rangeEnd=rangeEnd.trim(),$http.get("/range",{params:{rangeStart:rangeStart,rangeEnd:rangeEnd}}).then(function(response){for(var calls=[],i=response.data.rangeStart;i<response.data.rangeEnd;i++)calls.push($scope.create({absoluteChapter:i}));$q.all(calls)},function(err){$scope.alerts.push({type:"danger",msg:"Range entry failed.",icon:"times"})})):$scope.create({name:rangeStart}),$scope.range=""}},$scope.find=function(userId){userId||(userId=$scope.authentication.user._id),$scope.chapters=Chapters.query({user:userId}),Plans.query({user:userId},function(plans){console.log(plans[$scope.planSegment].chapters),$scope.plans=plans})},$scope.moveChapter=function(increment){$scope.alerts=[],$scope.readingMode&&1===increment?$scope.create({name:$scope.currentChapter}).then(function(){$scope.plans?$scope.incrementPlan():BibleText.getChapterText($scope.currentChapter,increment).then(function(result){$scope.currentChapter=result[0].data.verses[0].ref.split(":")[0],$scope.chapterTextArray=result})},function(err){}):BibleText.getChapterText($scope.currentChapter,increment).then(function(result){$scope.currentChapter=result[0].data.verses[0].ref.split(":")[0],$scope.chapterTextArray=result})},$scope.openPlansModal=function(size){var modalInstance=$modal.open({animation:!0,templateUrl:"modules/plans/views/plan-modal.html",controller:"PlansController",size:size,resolve:{plans:function(){return $scope.plans},authentication:function(){return $scope.authentication}}});modalInstance.result.then(function(plans){$scope.plans=plans,plans&&($scope.planSegment=0,$scope.beginPlanPortion())},function(){})}}]),angular.module("chapters").directive("mydirNavChapter",[function(){return{restrict:"E",templateUrl:"modules/chapters/views/nav-chapter.html"}}]),angular.module("chapters").directive("mydirShowChapterText",[function(){return{restrict:"E",templateUrl:"modules/chapters/views/show-chapter-text.html"}}]),angular.module("chapters").directive("stateLoadingIndicator",["$rootScope",function($rootScope){return{restrict:"E",template:'<div data-ng-show="isStateLoading" class="loading-indicator"><div class="loading-indicator-body"><h3 class="loading-title">Loading...</h3><div class="spinner"><i class="fa fa-spin fa-spinner"></i></div></div></div>',replace:!0,link:function(scope,elem,attrs){scope.isStateLoading=!1,$rootScope.$on("$stateChangeStart",function(){scope.isStateLoading=!0}),$rootScope.$on("$stateChangeSuccess",function(){scope.isStateLoading=!1})}}}]),angular.module("chapters",[]).factory("BibleText",[function($q,$http){var getRCVText=function(chapterName,increment){return $q(function(resolve){$http.get("/reference",{params:{chapterName:chapterName,increment:increment}}).then(function(response){for(var calls=[],i=0;i<response.data.length;i++){var lsmApiConfig={params:{String:response.data[i],Out:"json"}};calls.push($http.get("https://api.lsm.org/recver.php",lsmApiConfig))}$q.all(calls).then(function(arrayOfResults){resolve(arrayOfResults)})})})};return{getChapterText:function(chapterName,increment){return $q(function(resolve){getRCVText(chapterName,increment).then(function(result){resolve(result)})})}}}]),angular.module("chapters").factory("Chapters",["$resource","$http","$q",function($resource,$http,$q){var chapterFactory=$resource("chapters/:chapterId",{chapterId:"@_id"},{update:{method:"PUT"}});return chapterFactory}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("plans").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPlans",{url:"/plans",templateUrl:"modules/plans/views/list-plans.client.view.html"}).state("createPlan",{url:"/plans/create",templateUrl:"modules/plans/views/create-plan.client.view.html"}).state("viewPlan",{url:"/plans/:planId",templateUrl:"modules/plans/views/view-plan.client.view.html"}).state("editPlan",{url:"/plans/:planId/edit",templateUrl:"modules/plans/views/edit-plan.client.view.html"})}]),angular.module("plans").controller("PlansControllerCrud",["$scope","$modal","$stateParams","$location","Authentication","Plans","$window",function($scope,$modal,$stateParams,$location,Authentication,Plans,$window){$scope.authentication=Authentication,Plans.query({user:$scope.authentication.user._id}).$promise.then(function(response){$scope.plans=response}),$scope.create=function(){var plan=new Plans({name:this.name});plan.$save(function(response){$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.update=function(){var plan=$scope.plan;plan.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.plans=Plans.query({user:$scope.authentication.user._id})},$scope.findOne=function(){$scope.plan=Plans.get({planId:$stateParams.planId})},$scope.open=function(size){var modalInstance=$modal.open({animation:!0,templateUrl:"modules/plans/views/plan-modal.html",controller:"ModalInstanceCtrl",size:size,resolve:{plans:function(){return $scope.plans},authentication:function(){return $scope.authentication}}});modalInstance.result.then(function(plans){$scope.plans=plans},function(){})}}]),angular.module("plans").controller("PlansController",["$scope","$modalInstance","plans","authentication","Plans","$window",function($scope,$modalInstance,plans,authentication,Plans,$window){$scope.plans=plans,$scope.authentication=authentication,$scope.selected={item:null},$scope.items=[{name:"Whole Bible (1 year)",plans:[{name:"Old Testament (1 year)",startChapter:1,endChapter:929,cursor:1,pace:3},{name:"New Testament (1 year)",startChapter:930,endChapter:1189,cursor:930,pace:1}]},{name:"New Testament (6 months)",plans:[{name:"New Testament (6 months)",startChapter:930,endChapter:1189,cursor:930,pace:2}]}],$scope.ok=function(){$modalInstance.close($scope.plans)},$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.myCreate=function(passedPlan){var plan=new Plans(passedPlan);plan.$save(function(response){$scope.success="Plan saved!"},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createMultiple=function(item){for(var i=0;i<item.plans.length;i++){for(var exists=!1,j=0;j<$scope.plans.length;j++)$scope.plans[j].name===item.plans[i].name&&(exists=!0);exists?$scope.error="You're already using this plan.":$scope.myCreate(item.plans[i])}$scope.selected=null,$scope.find()},$scope.remove=function(plan){var areYouSure=$window.confirm("Are you absolutely sure you want to delete this plan? All progress will be permanently lost.");if(plan&&areYouSure){plan.$remove();for(var i in $scope.plans)$scope.plans[i]===plan&&$scope.plans.splice(i,1)}},$scope.find=function(){$scope.plans=Plans.query({user:$scope.authentication.user._id})}}]),angular.module("plans").factory("Plans",["$resource",function($resource){return $resource("plans/:planId",{planId:"@_id"},{update:{method:"PUT"},readToday:{method:"GET",url:"plans/:planId/today",isArray:!0}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);